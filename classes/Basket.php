<?php
require_once(dirname(__FILE__)."/../includes/connection.php");
/**
 *  Basket class representing the basket.
 *  The contents consists of upc keys with quantity as values.
 *  We do not store other information such as stock 
 *  as they may change.
 */
class Basket{

    function __constructor(){
        if(!isset($_SESSION['basket'])){
            $_SESSION['basket'] = array();
        }
    }

    function addItem($upc, $qty){
        global $connection;
        // Check stock.
        $stmt = $connection->prepare('SELECT stock FROM Item WHERE upc = ?');
        $stmt->bind_param('i', $upc);
        $stmt->execute();

        if($stmt->error) {
            printf("<b>Error: %s.</b>\n", $stmt->error);
        }
        $result = $stmt->get_result();
        if ($row = $result->fetch_assoc()){
            print_r($row);
            $stock = $row['stock'];
        }
        if ($stock >= $qty){
            // If in stock, add and return true.
            $_SESSION['basket'][$upc] = $qty;
            return true;
        } else {
            //TODO
            // If not in stock, return false.
            return false;
        }
    }

    function getDetails(){
        global $connection;
        if(isset($_SESSION['basket'])){
            $basket = $_SESSION['basket'];
            $details;
            foreach (array_keys($basket) as $upc){
                //Select item information. 
                $stmt = $connection->prepare("SELECT * FROM Item WHERE upc = ?");
                $stmt->bind_param('i', $upc);
                $stmt->execute();

                $result = $stmt->get_result();
                if ($row = $result->fetch_assoc()){
                    $details[$upc] = $row;
                }
            }
            return $details;
        } else {
            return array();
        }
    }

    function getContents(){
        if (!isset($_SESSION['basket'])){
            $_SESSION['basket'] = array();
        }
        return $_SESSION['basket'];
    }

    function emptyBasket(){
        $_SESSION['basket'] = array();
    }

    function checkout($cardNo, $expiry){
        global $connection;
        // TODO Extract cid.
        $cid = 334;
        try {
            // Start transaction.
            $connection->autocommit(false);
            // Insert the purchase information first.
            $stmt = $connection->prepare("INSERT INTO Purchase(date, cid, cardNo, expiryDate) VALUES (?,?,?,?)");
            $stmt->bind_param('iiii',time(), $cid, $cardNo, $expiry);

            $result = $stmt->execute();
            // Make sure we have a purchase to add things to.
            if (!$result){
                echo 'Error'.$stmt->error."\n";
                throw new Exception($stmt->error);
            }

            // Retrieve the autogenerated id we just got.
            $receiptId = $stmt->insert_id;
            echo 'Receipt Id is '.$receiptId;
            $contents = $this->getContents();
            $details = $this->getDetails();
            // Try all the items.
            foreach ($contents as $upc => $buyqty){
                // Check to see if item is in stock.
                if ($buyqty > $details[$upc]['stock']){
                    // Item not in stock. Abort.
                    // Someone must have bought it before us.
                    throw new Exception('Not enough requested stock for UPC '.$upc);
                }
                $stmt = $connection->prepare("INSERT INTO PurchaseItem(receiptId, upc, quantity) VALUES(?,?,?)");
                $stmt->bind_param("iii", $receiptId, $upc, $buyqty);
                $stmt->execute();

                // Decrement store stock.
                $stmt = $connection->prepare("UPDATE Item SET stock = ? WHERE upc = ?");
                $remainingStock = $details[$upc]['stock'] - $buyqty;
                $stmt->bind_param('ii', $remainingStock, $upc);
                $stmt->execute();
            }
            $connection->commit();
        } catch (Exception $e){
            $connection->rollback();
            echo $e->getMessage();
        }
        $connection->autocommit(true);
        return $receiptId;
    }

}
